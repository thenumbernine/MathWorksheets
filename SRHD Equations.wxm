/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 13.04.0 ] */

/* [wxMaxima: input   start ] */
/* Numerical Hydrodynamics in Special Relativity, Jose Maria Marti, 2003 */"";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
swap(eqn) := rhs(eqn)=lhs(eqn);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* newtonian velocity */
v : [vx, vy, vz];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* relativistic velocity sans u0 */
u : [ux, uy, uz];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* lorentz factor.  W = u0. */
W_from_v : W = 1/sqrt(1 - v.v);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
v_from_u : create_list(v[i] = u[i] / W, i, [1,2,3]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
u_from_v : create_list(solve(v_from_u[i], u[i])[1], i, [1,2,3]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* state variables */"";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* rest mass density */
D_from_%rho_W : D = %rho * W;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* momentum density */
S : [Sx, Sy, Sz];
S_from_%rho_h_W : create_list(S[i] = %rho * h * W^2 * v[i], i, [1,2,3]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* total energy density */
%tau_from_%rho_h_W_P_D : %tau = %rho * h * W^2 - P - D;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* verify that the state variables reduce to newtonian equations when v<<1, h->1 */"";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
W_newtonian_limit : subst([vx=0, vy=0, vz=0], W_from_v);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
D_newtonian_limit : subst([W_newtonian_limit], D_from_%rho_W);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
S_newtonian_limit : create_list(subst([W_newtonian_limit, h=1], S_from_%rho_h_W[i]), i, [1,2,3]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* this is supposed to recover %rho E = %rho (e + v^2/2) ... with v << 1 ... so v is hard to see, but it's there ... */
subst([h_from_e_P_%rho, W_newtonian_limit, D_newtonian_limit], %tau_from_%rho_h_W_P_D)$
ratsimp(%)$
%tau_newtonian_limit : %;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* rest energy (E=mc^2) */
eRest_from_%rho_e : eRest = %rho * (1 + e);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
%rho_from_eRest_e : solve(eRest_from_%rho_e, %rho)[1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* ideal gas law */
P_from_K_%rho : P = K * %rho^%gamma;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
P_from_K_eRest_e: subst([%rho_from_eRest_e], P_from_K_%rho);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
depends(P, eRest);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* relativistic speed of sound.
http://en.wikipedia.org/wiki/Relativistic_Euler_equations
This only considers differentials of rest energy eRest,
and not from the ideal gas constant K (which is a constant)
or specific internal energy e (which isn't).
*/
Cs^2 = 'diff(subst([P_from_K_eRest_e], P), eRest);
Cs^2 = diff(subst([P_from_K_eRest_e], P), eRest);
lhs(%)=rhs(%)*lhs(P_from_K_eRest_e)/rhs(P_from_K_eRest_e);
subst([eRest_from_%rho_e], %);
CsSq_from_P_%rho_e : %;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* internal specific enthalpy */
h_from_e_P_%rho : h = 1 + e + P / %rho;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* this is from "Hydrodynamics II"
and used in "Numerical Hydrodynamics in General Relativity" by Jose A. Font */
P_from_%rho_e : P = (%gamma - 1) * %rho * e;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
h_from_e : ratsimp(subst([P_from_%rho_e], h_from_e_P_%rho));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
P_%rho_from_e : P_from_%rho_e/%rho;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
e_from_P_%rho : solve(P_from_%rho_e, e)[1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
subst([e_from_P_%rho], h_from_e_P_%rho);
ratsimp(%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* this is one of the Fortran code speed of sound calculations... where does it come from? */
Cs^2 = %gamma * P / (%rho * h);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* this would be equal if 1/(e+1) = 1/h
i.e. if h = e + 1 vs. the initial h = 1 + e + P/%rho
which is true if e = e + P/%rho
i.e. if P/%rho = 0
i.e. if P = 0 (which could possibly be an initial condition of this system)
*/"";
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* this is another... 
Cs^2 = %gamma * P / (%rho + %gamma * P / (%gamma - 1))
This will match Cs^2 = %gamma * P / (%rho * (e + 1))
only if %rho * (e + 1) = %gamma * P / (%gamma - 1) + %rho
i.e. %rho * e = %gamma * P / (%gamma - 1)
i.e. P = (%gamma - 1) / %gamma * %rho * e
...which matches if %gamma is close to 1, or if the denominator's first term's numerator has an extra gamma.

Now Cs^2 = %gamma * P / (%rho + %gamma * P / (%gamma - 1)) is equal to %gamma * P / (%rho * h)
only if %rho * h = %gamma * P / (%gamma - 1) + %rho
i.e. h = %gamma / (%gamma - 1) * P / %rho + 1
... and this is equal to to h = 1 + e + P / %rho for
%gamma / (%gamma - 1) * P / %rho + 1 = 1 + e + P / %rho
i.e. P/%rho * %gamma/(%gamma - 1) = e + P/%rho
i.e. P/%rho * (%gamma - %gamma + 1)/(%gamma - 1) = e
i.e. P/(%rho * (%gamma - 1)) = e
i.e. P = (%gamma - 1) * %rho * e
... which looks right.

So the two speed of sound equations used in the program match one another for the relativistic enthalpy equation.
But neither match my derivation of the speed of sound.

This means that h = 1 + e + P / %rho is good (as they did provide it)
and that P = (%gamma - 1) * %rho * e is good (which is only provided in the GRHD paper, not the SRHD)

But it means the paper used a different derivation of the speed of sound,
or a different definition of rest energy or internal energy.

Cs^2 = %gamma * P / (%rho * h) = %gamma * P / (%rho * (%gamma / (%gamma - 1) * P + 1))

*/
Cs^2 = %gamma * P / (%rho + %gamma * P / (%gamma - 1));
ratsimp(%);
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
